syntax = "proto3";

package ansys.api.mechanical.scripting.v1;

option csharp_namespace = "Ansys.Api.Mechanical.Scripting.V1";

// Supported Logger Severity levels
enum LoggerSeverity
{
    LOGGER_SEVERITY_TRACE = 0;
    LOGGER_SEVERITY_DEBUG = 1;
    LOGGER_SEVERITY_INFO = 2;
    LOGGER_SEVERITY_WARNING = 3;
    LOGGER_SEVERITY_ERROR = 4;
    LOGGER_SEVERITY_FATAL = 5;
}

// Send RunScript message to run jscript / python script code.
message RunScriptRequest 
{
	// script_code can be jscript or python script
	string script_code = 1;

	// enable logging
	bool enable_logging = 2;

	// Specify loggerseverity level
	LoggerSeverity logger_severity = 3;

	// progress interval at which to send the log_info (in milli seconds)
	int32 progress_interval = 4; 
}

// Receive RunScriptResponse when you run jscript or python script code.
message RunScriptResponse 
{
	// Result will be converted to string
	string script_result = 1;

	// Progress information
	string log_info = 2;
}

// Send ShutdownRequest message to exit from Mechanical.
message ShutdownRequest 
{
	bool force_exit = 1;	
}

// Receive ShutdownResponse message when you exit from Mechanical.
message ShutdownResponse 
{
	
}

// Use this describe about the packet during Upload / Download
message Chunk
{
	// Stream of bytes to be sent
    bytes payload = 1;

	// Stream size
    int64 size = 2;
}

// Use this during Upload.
message FileUploadRequest
{
	// File Name to be uploaded
    string file_name = 1;

	// Location on the server side
	string file_location = 2;

	// Details about the Data
    Chunk chunk = 3;
}

// Receive this during File Upload.
message FileUploadResponse 
{
	// Contains True if the Upload is successful
	bool is_ok = 1;
}

// Use this during Download.
message FileDownloadRequest
{
	// File path on the server side
	string file_path=1;

	//Details about the data
	int64 chunk_size=2;
}

// Receive this during File Download.
message FileDownloadResponse
{
	Chunk chunk=1;

	int64 file_size = 2;
}

// Interface of the Mechanical grpc service.
service MechanicalService 
{
	// Run jscript block.
	rpc RunJScript (RunScriptRequest) returns (stream RunScriptResponse);

	// Run python script block.
	rpc RunPythonScript (RunScriptRequest) returns (stream RunScriptResponse);

	// Exit Mechanical.
	rpc Shutdown (ShutdownRequest) returns (ShutdownResponse);

	// Upload file to Mechanical grpc server.
	rpc UploadFile(stream FileUploadRequest) returns (FileUploadResponse);

	// Download file from Mechanical grpc server.
	rpc DownloadFile(FileDownloadRequest) returns (stream FileDownloadResponse);
}